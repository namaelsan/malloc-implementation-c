mymalloc.c programımı, find_free_block fonksiyonumda kullandığım stratejileri karşılaştırmak için farklı boyutta ve farklı şekilde sıralanmış inputlarla çalıştırdım. Denemelerim farklı çalışma süreleri ve farklı bellek kullanım miktarları ortaya çıktı. Edindiğim verilere göre her birinin verimlilik ve hız açısından avantajları ve dezavantajları olduğunu söyleyebilirim.
 NEXT_FIT her seferinde tüm listeyi taramayacağı için program hızı bakımından diğer stratejilerden önce gelmektedir. Ancak NEXT_FIT hafıza verimliliği büyük ölçüde tahsis sırasına bağlıdır. Kolayca external fragmentation'a yol açabilir.
 BEST_FIT boyutu karşılayabilecek en küçük bloğu bulmak için tüm listeyi taramak zorunda kalacağından daha yavaş bir stratejidir. Ancak stratejide hafıza verimliliği aranıyorsa BEST_FIT küçük parçalar kullanacağından boş alanı en aza indirir ve external fragmentation'u önler. Bu da onu verimlilik konusunda en yüksek performanslı strateji yapar.
 WORST_FIT büyük blok tahsisleri gerçekleştireceği için boş alan miktarı kolayca artar ve hafızanın kolay tüketilmesine yol açar. WORST_FIT küçük alan tahsisleri için bile en büyük boşluğu seçeceği için bu büyük boşluklar bölünmeden kalır dolayısıyla bu strateji external fragmentation istenmeyen durumlarda kullanılmalıdır.
FIRST_FIT ilk karşılaşılan uygun bloğu bulur bu yüzden NEXT_FIT stratejisine benzer bir hız performansı sergiler. Yine NEXT_FIT'e benzer olarak tahsis sıralaması external fragmentation'a yol açabilir.

Özet olarak harcanan hafıza miktarı en önemli kriterlerse BEST_FIT, çalışma süresi bakımından NEXT_FIT veya FIRST_FIT, external fragmentation istenmiyorsa WORST_FIT uygulamanız için en uygun strateji olacaktır.
